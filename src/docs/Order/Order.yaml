openapi: 3.0.0
info:
  title: Order API
  description: API Documentation for Order management
  version: 1.0.0

paths:
  /api/orders:
    get:
      summary: Get all orders
      responses:
        200:
          description: List of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        404:
          description: Orders not found

    post:
      summary: Create a new order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  example: "60f7c4f8b4d8c70015b4b5b5"
                quantity:
                  type: integer
                  example: 2
                address:
                  type: string
                  example: "123 Main St"
                state:
                  type: string
                  enum: ["reserver", "payed", "delivered"]
                  example: "reserver"
      responses:
        201:
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        400:
          description: Invalid input

  /api/orders/{oid}:
    get:
      summary: Get an order by ID
      parameters:
        - in: path
          name: oid
          required: true
          schema:
            type: string
      responses:
        200:
          description: Order data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        404:
          description: Order not found

    put:
      summary: Update an order by ID
      parameters:
        - in: path
          name: oid
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  example: "60f7c4f8b4d8c70015b4b5b5"
                quantity:
                  type: integer
                  example: 3
                address:
                  type: string
                  example: "123 Main St"
                state:
                  type: string
                  enum: ["reserver", "payed", "delivered"]
                  example: "payed"
      responses:
        200:
          description: Order updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        400:
          description: Invalid input

    delete:
      summary: Delete an order by ID
      parameters:
        - in: path
          name: oid
          required: true
          schema:
            type: string
      responses:
        200:
          description: Order deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        404:
          description: Order not found

components:
  schemas:
    Order:
      type: object
      properties:
        _id:
          type: string
        user_id:
          type: string
        quantity:
          type: integer
        address:
          type: string
        state:
          type: string
          enum: ["reserver", "payed", "delivered"]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
