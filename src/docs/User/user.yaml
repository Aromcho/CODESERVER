openapi: 3.0.0
info:
  title: User API
  description: API Documentation for User management
  version: 1.0.0

paths:
  /api/user:
    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "user@example.com"
                password:
                  type: string
                  example: "password123"
                role:
                  type: string
                  example: "user"
                photo:
                  type: string
                  example: "url_to_photo"
                age:
                  type: integer
                  example: 30
                name:
                  type: string
                  example: "John Doe"
      responses:
        201:
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User created successfully"
                  user:
                    $ref: '#/components/schemas/User'
        400:
          description: Invalid input

    get:
      summary: Get all users
      parameters:
        - in: query
          name: role
          schema:
            type: string
          description: Role to filter users
      responses:
        200:
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        404:
          description: No users found

  /api/user/{uid}:
    get:
      summary: Get a user by ID
      parameters:
        - in: path
          name: uid
          required: true
          schema:
            type: string
      responses:
        200:
          description: User data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: User not found

    put:
      summary: Update a user by ID
      parameters:
        - in: path
          name: uid
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "user@example.com"
                password:
                  type: string
                  example: "password123"
                role:
                  type: string
                  example: "user"
                photo:
                  type: string
                  example: "url_to_photo"
                age:
                  type: integer
                  example: 30
                name:
                  type: string
                  example: "John Doe"
      responses:
        200:
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid input

    delete:
      summary: Delete a user by ID
      parameters:
        - in: path
          name: uid
          required: true
          schema:
            type: string
      responses:
        200:
          description: User deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: User not found

components:
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
        email:
          type: string
        password:
          type: string
        role:
          type: string
        photo:
          type: string
        age:
          type: integer
        name:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
